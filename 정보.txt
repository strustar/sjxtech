# 기존 원격 저장소 확인
git remote -v

# 기존 원격 저장소 제거
git remote remove origin

# 새 원격 저장소 추가
git remote add origin https://github.com/<new-username>/new-repo.git

# 기본 브랜치 설정
git branch -M main

# 새 저장소로 푸시
git push -u origin main


1. 최초 설정 (처음 한 번만)
# 1) GitHub에서 새 저장소 만들기
- GitHub.com 접속 → '+' 버튼 → New repository

# 2) 로컬 프로젝트 폴더에서
git init
git remote add origin https://github.com/strustar/my-website.git


2. 일상적인 코드 관리 (수정할 때마다)
# 1) 변경사항 확인
git status

# 2) 변경사항 저장하기 (이것만 실행)
git add .
git commit -m "어떤 것을 변경했는지 메시지 작성"
git push

npm run dev              # 개발 서버 실행 (http://localhost:3000)
npm run build
vercel --prod

쉽게 설명하면:
1. **개발 모드** (`npm run dev`)
npm run dev              # 개발 서버 실행 (http://localhost:3000)
   - 코드를 수정하면서 실시간으로 확인
   - 디버깅이 쉽고 개발에 최적화

2. **빌드** (`npm run build`)
   - 실제 서비스를 위한 최적화된 버전 생성
   - 코드 압축, 최적화
   - 성능 향상을 위한 여러 처리 수행
   - 오류가 있는지 전체 검사

따라서:
- 개발할 때는 `npm run dev`
- 배포하기 전에는 `npm run build`로 검사
- 오류가 없다면 배포 진행

`npm run build`가 성공해야 Vercel 배포도 성공할 수 있습니다.


📌 Next.js 프로젝트 개발 가이드

1. 프로젝트 생성
-------------------------------
npx create-next-app@latest my-website --typescript --tailwind --eslint
cd my-website

2. 기본 설정
-------------------------------
npm install               # 기본 패키지 설치
npm install 필요한패키지  # 추가 패키지 설치 (예: react-icons, axios 등)

3. 개발 과정
-------------------------------
npm run dev              # 개발 서버 실행 (http://localhost:3000)
- pages/ 폴더에 페이지 생성
- components/ 폴더에 컴포넌트 생성
- styles/ 폴더에 스타일 작성
- public/ 폴더에 이미지 등 정적 파일 저장

4. 코드 점검
-------------------------------
npm run lint             # 코드 문법 검사
npm run build           # 빌드 테스트

5. 로컬 테스트
-------------------------------
npm run build           # 프로덕션용 빌드
npm run start          # 빌드된 버전 로컬에서 테스트

6. Vercel 배포
-------------------------------
vercel                  # 개발 버전 배포 (테스트용)
vercel --prod          # 프로덕션 버전 배포 (실제 서비스)

7. 문제 해결 (필요시)
-------------------------------
# 의존성 clean install
rd /s /q node_modules   # Windows
rm -rf node_modules    # Mac/Linux
del package-lock.json  # Windows
rm package-lock.json   # Mac/Linux
npm install

8. 주요 폴더 구조
-------------------------------
my-website/
  ├── pages/           # 페이지 파일들
  ├── components/      # 재사용 컴포넌트
  ├── public/          # 정적 파일 (이미지 등)
  ├── styles/          # CSS 파일들
  ├── .env            # 환경 변수
  └── package.json    # 프로젝트 설정

9. 자주 쓰는 Git 명령어
-------------------------------
git init              # Git 저장소 초기화
git add .             # 모든 변경사항 스테이징
git commit -m "메시지" # 변경사항 커밋
git push             # 원격 저장소에 푸시

🔍 유용한 링크
-------------------------------
- Next.js 공식 문서: https://nextjs.org/docs
- Vercel 대시보드: https://vercel.com/dashboard
- Tailwind 문서: https://tailwindcss.com/docs


videoAI: [
     {
       title: 'Veo',
       description: '• AI 기반 스포츠 영상 분석 및 추적 전문 시스템\n• 실시간 경기 분석과 자동 하이라이트 추출 기능 제공',
       url: 'https://deepmind.google/technologies/veo/veo-2/',
       category: '비디오 생성',
     },
     {
       title: 'Sora',
       description: '• OpenAI의 혁신적 텍스트-비디오 생성 AI 플랫폼\n• 60초 이상의 자연스러운 고품질 장면 연출이 가능',
       url: 'https://openai.com/sora',
       category: '비디오 생성',
     },
     {
       title: 'Kling.ai',
       description: '• 음성·텍스트 기반 맞춤형 비디오 제작 플랫폼\n• 실시간 팀 협업과 빠른 피드백 시스템 탑재',
       url: 'https://klingai.com/',
       category: '비디오 생성',
     },
     {
       title: 'InVideo',
       description: '• 5000+ 전문 템플릿 기반의 비디오 제작 도구\n• AI 스크립트 작성과 자동 브랜딩 기능 탑재',
       url: 'https://invideo.io',
       category: '비디오 생성',
     },
     {
       title: 'Runway',
       description: '• 전문가급 AI 기반 비디오 편집 스튜디오\n• 텍스트 프롬프트로 고급 VFX와 편집 효과 구현',
       url: 'https://runway.ml',
       category: '비디오 생성',
     },
     {
       title: 'HeyGen',
       description: '• 기업용 AI 아바타 비디오 제작 플랫폼\n• 40개 이상 언어의 자연스러운 더빙과 립싱크 지원',
       url: 'https://www.heygen.com',


       
